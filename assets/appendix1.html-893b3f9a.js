import{_ as t,o as r,c as d,e as i}from"./app-d85a60fe.js";const l={},a=i('<h1 id="附录-1" tabindex="-1"><a class="header-anchor" href="#附录-1" aria-hidden="true">#</a> 附录 1</h1><h2 id="《敏捷宣言》映射" tabindex="-1"><a class="header-anchor" href="#《敏捷宣言》映射" aria-hidden="true">#</a> 《敏捷宣言》映射</h2><table><thead><tr><th>价值</th><th>映射</th></tr></thead><tbody><tr><td>个体和互动高于流程和工具</td><td>仆人式领导为团队赋权<br>团队构成<br>项目章程和团队章程<br>每日站会<br>组织文化</td></tr><tr><td>工作的软件高于详尽的文档</td><td>待办事项列表编制<br>待办事项列表的细化<br>展示/评审<br>帮助团队交付价值的执行实践</td></tr><tr><td>客户合作高于合同谈判</td><td>团队构成<br>敏捷项目的衡量指标<br>组织文化<br>采购和合同<br>组织结构</td></tr><tr><td>响应变化高于遵循计划</td><td>回顾<br>待办事项列表的细化<br>展示/评审</td></tr></tbody></table><table><thead><tr><th>原则</th><th>映射</th></tr></thead><tbody><tr><td>我们的最高目标是，通过尽早持续交付有价值的软件来满足客户的需求</td><td>项目生命周期的特征<br>帮助团队交付价值的执行实践</td></tr><tr><td>欢迎对需求提出变更，即使在项目开发后期也不例外。敏捷过程要善于利用需求变更，帮助客户获得竞争优势</td><td>待办事项列表的细化</td></tr><tr><td>要经常交付可用的软件，周期从几周到几个月不等，且越短越好</td><td>常见敏捷实践</td></tr><tr><td>项目实施过程中，业务人员与开发人员必须始终通力协作</td><td>仆人式领导为团队赋权<br>待办事项列表编制<br>待办事项列表的细化</td></tr><tr><td>要善于激励项目人员，给予他们所需的环境和支持，并相信他们能够完成任务</td><td>团队构成<br>项目章程和团队章程<br>回顾</td></tr><tr><td>无论是对开发团队还是团队内部，信息传达最有效的方式都是面对面的交谈</td><td>团队结构<br>每日站会</td></tr><tr><td>可用的软件是衡量进度的首要衡量标准</td><td>帮助团队交付价值的执行实践<br>迭代和增量如何帮助交付工作产品</td></tr><tr><td>敏捷过程提倡可持续的开发。项目发起人、开发人员和用户应该都能够始终保持步调稳定</td><td>项目章程和团队章程</td></tr><tr><td>对技术的精益求精以及对设计的不断完善将提高敏捷性</td><td>常见敏捷实践</td></tr><tr><td>简洁，即尽最大可能减少不必要的工作，这是一门艺术</td><td>待办事项列表编制<br>待办事项列表的细化</td></tr><tr><td>最佳的架构、需求和设计将出自于自组织团队</td><td>团队构成</td></tr><tr><td>团队要定期反省怎样做才能更有效，并相应地调整团队的行为</td><td>回顾</td></tr></tbody></table><h2 id="scrum" tabindex="-1"><a class="header-anchor" href="#scrum" aria-hidden="true">#</a> SCRUM</h2><p>Scrum 是用于管理产品开发的单个团队过程框架。该框架包含 Scrum 角色、事件、工件和规则，采用迭代方法来交付工作产品。Scrum 是运行在 1 个月或更少时间的时间盒上的，其中包含持续时间一致的多个冲刺，在这些冲刺中会产生潜在可发布的产品增量。</p><p>Scrum 团队包含产品负责人、开发团队和 Scrum 主管。</p><ul><li>产品负责人负责实现产品价值的最大化</li><li>开发团队是一个跨职能自组织团队，其开发成员拥有所需的一切资源，可在不依赖团队外部其他资源的情况下交付工作产品</li><li>Scrum 主管负责确保 Scrum 过程获得相应支持且 Scrum 团队遵从实践和规则，并指导团队消除障碍</li></ul><table><thead><tr><th>事件</th><th>工件</th></tr></thead><tbody><tr><td>冲刺<br>冲刺计划<br>每日例会<br>冲刺评审<br>冲刺回顾</td><td>产品待办事项列表<br>冲刺待办事项列表<br>增量</td></tr></tbody></table><h2 id="极限编程" tabindex="-1"><a class="header-anchor" href="#极限编程" aria-hidden="true">#</a> 极限编程</h2><p>极限编程（XP）是一种基于频繁交付周期的软件开发方法。该名称基于这样一个理念；将特定最佳实践提炼到最纯粹和最简单的形式，然后在整个项目周期内持续运用该实践。</p><table><thead><tr><th>XP 实践领域</th><th>主要</th><th>次要</th></tr></thead><tbody><tr><td>组织</td><td>集中办公<br>整个团队<br>信息灵通的工作场所</td><td>真实客户参与<br>团队连续性<br>可持续节奏</td></tr><tr><td>技术</td><td>结对编程<br>测试优先编程<br>增量设计</td><td>共用代码/集体所有制<br>代码和测试文档<br>重构</td></tr><tr><td>规划</td><td>用户故事<br>每周周期<br>每季周期<br>时差</td><td>根本原因分析<br>裁剪团队<br>按使用情况支付<br>协商范围合同<br>每日站会</td></tr><tr><td>整合</td><td>10 分钟构建<br>持续集成<br>测试优先</td><td>单代码库<br>增量部署<br>每日部署</td></tr></tbody></table><p>该演变是通过筛选核心价值观（沟通、简洁、反馈、勇气、尊重）并根据主要原则（人性化、经济、互惠互利、自相似、改进、多样性、反思、流程、机会、冗余、失败、质量、循序渐进、承担的责任）信息来设计和采用技术的结果。</p><h2 id="看板方法" tabindex="-1"><a class="header-anchor" href="#看板方法" aria-hidden="true">#</a> 看板方法</h2><p>看板在精益制造中是一种用于规划库存控制和补给的系统。准时制库存。</p><p>以下需要时看板最为适用</p><ul><li>灵活性</li><li>专注于持续交付</li><li>提高工作效率和质量</li><li>提高效率</li><li>团队成员专注力</li><li>工作负荷的可变性</li><li>减少浪费</li></ul><table><thead><tr><th>定义原则</th><th>核心属性</th></tr></thead><tbody><tr><td>从当前状态开始<br>同意采用增量演变性变更<br>尊重当前过程、角色、职责和头衔<br>鼓励所有层级领导行为</td><td>工作流可视化<br>限制在制品<br>管理流程<br>明确过程政策<br>实施反馈循环<br>提高协作性</td></tr></tbody></table><p>在看板方法中，完成工作比开始新工作更为重要，从未完成的工作中无法获得任何价值。</p><h2 id="水晶方法" tabindex="-1"><a class="header-anchor" href="#水晶方法" aria-hidden="true">#</a> 水晶方法</h2><table><thead><tr><th>核心价值观</th><th>常见属性</th></tr></thead><tbody><tr><td>人员<br>交互<br>社区<br>技能<br>人才<br>沟通</td><td>频繁交付<br>反思式改进<br>密切或渗透型沟通<br>个人安全<br>专注<br>容易接触专家用户<br>具有自动化测试、配置管理和频繁整合的技术环境</td></tr></tbody></table><h2 id="scrumban" tabindex="-1"><a class="header-anchor" href="#scrumban" aria-hidden="true">#</a> SCRUMBAN</h2><p>团队将 Scrum 作为框架，而将看板作为过程改进方法。</p><p>工作被分解到许多小的“冲刺”，并利用看板面板来可视化和监督工作。</p><h2 id="功能驱动开发-fdd" tabindex="-1"><a class="header-anchor" href="#功能驱动开发-fdd" aria-hidden="true">#</a> 功能驱动开发（FDD）</h2><p>目的是满足大型软件开发项目的特定需求。小型商业价值功能重视能力。</p><p>六个主要角色，每个人可以担任以下一个或多个角色：</p><ul><li>项目经理</li><li>首席架构师</li><li>开发经理</li><li>首席编程人员</li><li>类负责人</li><li>领域专家</li></ul><p>五个过程或活动，以迭代方式执行：</p><ul><li>开发整个模型</li><li>构建功能列表</li><li>依据功能规划</li><li>依据功能设计</li><li>依据功能构建</li></ul><p>核心软件工程最佳实践提供支持：</p><ul><li>领域对象建模</li><li>依据功能开发</li><li>个体代码所有制</li><li>功能团队</li><li>检查</li><li>配置管理</li><li>定期构建</li><li>进度和结果可视化</li></ul><h2 id="动态系统开发方法-dsdm" tabindex="-1"><a class="header-anchor" href="#动态系统开发方法-dsdm" aria-hidden="true">#</a> 动态系统开发方法（DSDM）</h2><p>该框架开发为行业领导者之间的非商业性协作方式。</p><p>DSDM 因强调制约因素驱动交付而著称。该框架从一开始便可设置成本、质量和实践，然后利用正式的范围优先级来满足这些制约因素的要求。</p><p>八个原则来指导 DSDM 框架的使用：</p><ul><li>专注于业务需求</li><li>准时交付</li><li>协作</li><li>在质量上永不妥协</li><li>在坚实的基础上进行增量式构建</li><li>迭代开发</li><li>保持持续和明晰的沟通</li><li>演示控制（使用适当的技术）</li></ul><h2 id="敏捷统一过程-agileup" tabindex="-1"><a class="header-anchor" href="#敏捷统一过程-agileup" aria-hidden="true">#</a> 敏捷统一过程（AgileUP）</h2><p>主要元素</p><table><thead><tr><th>发布中的因素</th><th>指导因素的原则</th></tr></thead><tbody><tr><td>模型<br>实施<br>测试<br>部署<br>配置管理<br>项目管理<br>环境</td><td>团队了解当前工作<br>简洁性<br>敏捷性<br>专注于高价值活动<br>工具依赖性<br>量身定制<br>特定情境</td></tr></tbody></table><h2 id="scrum-of-scrums" tabindex="-1"><a class="header-anchor" href="#scrum-of-scrums" aria-hidden="true">#</a> SCRUM OF SCRUMS</h2><h2 id="大规模敏捷框架-safe" tabindex="-1"><a class="header-anchor" href="#大规模敏捷框架-safe" aria-hidden="true">#</a> 大规模敏捷框架（SAFe）</h2><p>SAFe 专注于在项目组合、项目集和团队层详细设定实践、角色和活动，强调围绕专注于向客户提供持续价值的价值流来组织企业。</p><ul><li>采用经济视角</li><li>应用系统思维</li><li>假设可变性；预留方案</li><li>以快速整合的学习周期进行增量式构建</li><li>根据对工作系统的客观评估设定里程碑</li><li>直观显示并限制在制品，减小批次规模并管理队列长度</li><li>应用节奏；与跨域规划同步</li><li>解锁知识员工的内在动力</li><li>决策分散化</li></ul><h2 id="大规模敏捷开发-less" tabindex="-1"><a class="header-anchor" href="#大规模敏捷开发-less" aria-hidden="true">#</a> 大规模敏捷开发（LeSS）</h2><p>以扩展 Scrum 方法为共同目标来组织多个开发团队的框架，其核心原则是尽可能博阿留传统单个团队 Scrum 模型的元素。</p><table><thead><tr><th>LeSS 与 Scrum 的相似性</th><th>在 Scrum 中添加 LeSS 技术</th></tr></thead><tbody><tr><td>一个产品待办事项列表<br>一个所有项目完成的定义<br>一个可在每个冲刺结束时潜在可交付的产品增量<br>一名产品负责人<br>全面的跨职能团队<br>一个冲刺</td><td>冲刺计划分为两个正式部分：冲刺内容和方式<br>有机跨团队合作<br>整体跨团队优化<br>专注于跨团队改进的整体回顾</td></tr></tbody></table><h2 id="企业-scrum" tabindex="-1"><a class="header-anchor" href="#企业-scrum" aria-hidden="true">#</a> 企业 SCRUM</h2><p>旨在通过更整体性组织层而不是单个产品开发层来应用 Scrum 方法的框架。该框架尤其建议组织领导：</p><ul><li>将所有 Scrum 应用扩展到所有组织方面</li><li>普及 Scrum 技术以便在这些不同的方面轻松应用</li><li>根据需要使用补充技术扩展 Scrum 方法</li></ul><p>其目的在于通过实现颠覆性创新将敏捷方法扩展到项目执行范围以外。</p><h2 id="规范敏捷-da" tabindex="-1"><a class="header-anchor" href="#规范敏捷-da" aria-hidden="true">#</a> 规范敏捷（DA）</h2><p>在综合模型中整合多种敏捷最佳实践的过程决策框架。DA 旨在平衡专注范围过于狭窄（如 Scrum）或细节过于规范（如 AgileUP）的流行方法。为实现这种平衡，该方法根据以下原则混合了多种敏捷技术：</p><ul><li>以人为先：枚举不同层级的角色和组织元素</li><li>面向学习：鼓励协作改进</li><li>完全交付生命周期：提倡多个符合目的的生命周期</li><li>目标驱动：定制过程以实现特定结果</li><li>企业意识：提供跨部门治理方面的指导</li><li>可扩展：涵盖多种项目复杂性维度</li></ul>',54),e=[a];function h(b,c){return r(),d("div",null,e)}const s=t(l,[["render",h],["__file","appendix1.html.vue"]]);export{s as default};
