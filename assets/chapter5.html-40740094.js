import{_ as t,o as d,c as r,e as a}from"./app-d85a60fe.js";const i={},e=a('<h1 id="实施敏捷-在敏捷环境中交付" tabindex="-1"><a class="header-anchor" href="#实施敏捷-在敏捷环境中交付" aria-hidden="true">#</a> 实施敏捷：在敏捷环境中交付</h1><h2 id="项目章程和团队章程" tabindex="-1"><a class="header-anchor" href="#项目章程和团队章程" aria-hidden="true">#</a> 项目章程和团队章程</h2><p>每个项目都需要一个项目章程，这样项目团队就能理解项目之所以重要的原因、团队的前进方向以及项目的目标。</p><p>制作章程的过程能帮助团队学习如何一起工作，怎样围绕项目协作。</p><p>对于敏捷项目而言，团队至少还需要项目愿景或目标，以及一组清晰的工作协议。</p><ul><li>我们为什么要做这个项目？这是项目愿景。</li><li>谁会从中受益？如何受益？这可能是项目愿景和/或项目目标的一部分。</li><li>对此项目而言，达到哪些条件才意味着项目完成？这些是项目的发布标准。</li><li>我们将怎样合作？这说明预期的工作流。</li></ul><p>制作章程的一些建议，可以将其作为指定团队社会契约的基础：</p><ul><li>团队价值观，例如可持续的开发速度和核心工作时间。</li><li>工作协议，例如“就绪”如何定义，这是团队可以接受工作的前提；“完成”如何定义，这样团队才能一致地判断完整性；考虑时间盒；或使用工作过程限制。</li><li>基本规则，例如有关一个人在会议上发言的规定。</li><li>团队规范，例如团队如何对待会议时间。</li></ul><h2 id="常见敏捷实践" tabindex="-1"><a class="header-anchor" href="#常见敏捷实践" aria-hidden="true">#</a> 常见敏捷实践</h2><h3 id="回顾" tabindex="-1"><a class="header-anchor" href="#回顾" aria-hidden="true">#</a> 回顾</h3><p>团队要定期反省如何能够做到更加有效，并相应地调整团队的行为。</p><p>可在以下关键时刻进行回顾：</p><ul><li>当团队完成一个发布或者加入一些功能时。这不一定是一个巨大的增量。它可以是任何发布，无论它有多小。</li><li>自上次回顾以来，又过了几周时间。</li><li>当团队出现问题时，以及团队协作完成工作不顺畅时。</li><li>当团队达到任何其他里程碑时。</li></ul><p>回顾不是责备，是让团队从以前的工作学习中做出小的改进。</p><p>回顾针对性的（人的感觉）和定量的（衡量指标）数据，找到根源，设计对策，并制定行动计划。</p><p>团队选择改进时，要决定如何衡量结果。然后在下一段时间内要衡量结果，以验证每个改进成功与否。</p><p>对改进的重要性进行排序。</p><h3 id="待办事项列表编制" tabindex="-1"><a class="header-anchor" href="#待办事项列表编制" aria-hidden="true">#</a> 待办事项列表编制</h3><p>产品路线图，以显示预期的可交付成果序列。</p><p>产品负责人根据团队的实际成果重新规划路线图。</p><h3 id="待办事项列表的细化" tabindex="-1"><a class="header-anchor" href="#待办事项列表的细化" aria-hidden="true">#</a> 待办事项列表的细化</h3><ul><li>基于流程的敏捷的即时细化。</li><li>基于迭代的团队在两周的迭代中用 1 小时的时间盒讨论。</li><li>基于迭代的敏捷团队的多次细化讨论。</li></ul><p>细化会议上，产品负责人向团队介绍故事的创意，让团队了解故事中潜在的挑战或问题。还可以请求团队对不确定依赖关系的功能进行刺探，以了解风险。</p><ul><li>鼓励团队在开发人员、测试人员、业务分析人员和产品负责人三方面开展合作，一起讨论和撰写故事。</li><li>把整个故事的概念呈现给团队。团队进行讨论，并根据需要将其细化为许多故事。</li><li>与团队一起寻找各种方法探索和撰写故事，确保所有的故事都足够小，以便团队能源源不断地交付完成的工作。考虑每天至少完成一个故事。</li></ul><p>团队通常有一个目标，就是每周用不超过 1 小时的时间来为下一批工作细化故事。把时间尽可能华仔工作上而不是计划上。超过 1 小时，产品负责人可能是过度准备了，或者团队缺乏评估和细化工作所需的<strong>一些关键技能</strong>。</p><h3 id="每日站会" tabindex="-1"><a class="header-anchor" href="#每日站会" aria-hidden="true">#</a> 每日站会</h3><p>团队成员利用每日站会对彼此做出小的承诺，发现问题，并确保团队工作顺利进行。</p><p>为每日站会规定时间盒，不超出 15 分钟。团队以某种方式“过一下”看板或任务板，而团队中的任何人都可以主持站会。</p><p>基于迭代的敏捷，每个人轮流回答下列问题：</p><ul><li>上次站会以来我都完成了什么？</li><li>从现在到下一次站会，我计划完成什么？</li><li>我的障碍（或风险或问题）是什么？</li></ul><p>基于流程的敏捷，可将注意力集中在团队的产出上。团队从右到左对看板进行评估，问题包括：</p><ul><li>我们还需要做些什么来推进这一工作？</li><li>有人在做看板上所没有的事情么？</li><li>作为一个团队，我们需要完成什么？</li><li>工作流程是否存在瓶颈或阻碍？</li></ul><p>站会的反模式：</p><ul><li>变成状态报告会议</li><li>当问题变得明显时，团队才开始解决问题。站会是为了发现存在的问题，而不是解决它们。将问题添加到停车场，然后创建另一次会议去解决。</li></ul><p>要针对团队何时需要站会、站会是否有效等问题有意识地做出决定。</p><p>要鼓励任何团队成员主持会议而不是由项目经理或领导主持，以确保它不会变成状态报告会议，而是作为团队进行自我组织和相互承诺的会议。</p><h3 id="展示-评审" tabindex="-1"><a class="header-anchor" href="#展示-评审" aria-hidden="true">#</a> 展示/评审</h3><p>当团队以用户故事的形式完成特定的功能时，团队会定期展示工作产品。看过展示后，产品负责人接受或拒绝故事。</p><p>每两周至少展示一次团队的工作产品。</p><p>敏捷项目的一个基本要素是频繁地交付工作产品。</p><p>一个没有展示或发布的团队，其学习的速度不会快，并且很可能并未采用敏捷技术。</p><h3 id="规划基于迭代的敏捷" tabindex="-1"><a class="header-anchor" href="#规划基于迭代的敏捷" aria-hidden="true">#</a> 规划基于迭代的敏捷</h3><p>不要超出团队在一个迭代中所能完成工作的能力。</p><p>团队估算能够完成的工作，这也是一种能力的衡量。</p><h3 id="帮助团队交付价值的执行实践" tabindex="-1"><a class="header-anchor" href="#帮助团队交付价值的执行实践" aria-hidden="true">#</a> 帮助团队交付价值的执行实践</h3><p>如果团队不重视质量，很快就会无法快速发布任何东西。</p><ul><li>持续集成</li><li>在不同层面测试</li><li>验收测试驱动开发（ATDD）：讨论工作产品的验收标准</li><li>测试驱动开发（TDD）和行为驱动开发（BDD）</li><li>刺探（时间盒研究或实验）</li></ul><h3 id="迭代和增量如何帮助交付工作产品" tabindex="-1"><a class="header-anchor" href="#迭代和增量如何帮助交付工作产品" aria-hidden="true">#</a> 迭代和增量如何帮助交付工作产品</h3><p>迭代可以帮助团队未交付和多种反馈创建一个节奏。团队会为交付和反馈创建增量。交付的第一部分是一次演示。团队会收到关于产品的外观和运行方式的反馈。团队成员回顾如何检查和调整有关过程以取得成功。</p><p>演示或评审是敏捷项目流程的必要组成部分。为团队的交付节奏安排适当的演示。</p><h2 id="解决敏捷项目的挑战" tabindex="-1"><a class="header-anchor" href="#解决敏捷项目的挑战" aria-hidden="true">#</a> 解决敏捷项目的挑战</h2><table><thead><tr><th>痛点</th><th>解决痛点的可能性</th></tr></thead><tbody><tr><td>团队目标或任务不明确</td><td>敏捷章程中关于目标的部分 - 愿景、使命和使命测试</td></tr><tr><td>团队工作协议不明确</td><td>敏捷章程中关于一致性的部分 - 价值观、原则和工作协议</td></tr><tr><td>需求不明确</td><td>帮助发起人和相关方制定产品愿景。考虑使用实例化需求、用户故事地图和影响地图来构建产品路线图。让团队和产品负责人一起来明确需求的期望和价值。逐步将路线图分解为据有更少具体需求的待办事项列表</td></tr><tr><td>用户体验不佳</td><td>开发团队的用户体验设计实践应该在早期就让用户经常参与</td></tr><tr><td>估算不准确</td><td>通过分解故事让故事变小。让整个团队使用相对估算进行估算。考虑通过敏捷建模或刺探来理解故事</td></tr><tr><td>工作分配或工作进展不明确</td><td>帮助团队认识到自我管理工作。考虑用看板面板查看工作流程。考虑利用每日站会，根据看板查看工作进展</td></tr><tr><td>团队面临障碍</td><td>仆人式领导能帮助消除这些障碍。如果团队不知道他们都有哪些可选方案，就要考虑聘请教练。有时，团队或仆人式领导无法消除障碍，团队就需要上报故事</td></tr><tr><td>由于产品待办事项列表不够完善，导致工作延误/超时</td><td>产品负责人和团队一起研讨故事。为故事创建一个准备就绪的定义。考虑分拆故事以使用更小的故事</td></tr><tr><td>缺陷</td><td>考虑对特定环境有效的技术实践。它们可能是：结对工作、产品集体负责制、普适测试（测试驱动方法和自动化测试方法）以及稳健的完成的定义</td></tr><tr><td>工作未完成</td><td>团队确定故事完成的定义，包括验收标准在内。另外，还要为项目补充发布标准</td></tr><tr><td>技术债务（代码质量降级）</td><td>重构、敏捷建模、普适测试、自动化代码质量分析、完成的定义</td></tr><tr><td>产品复杂性过高</td><td>无论是软件项目还是非软件项目，都要常常鼓励团队思考：“最简单的有效方法是什么？”，并应用“简洁，即尽最大可能减少不必要的工作，这是一门艺术”的敏捷原则。这样做将有助于降低复杂度</td></tr><tr><td>团队合作过程进展缓慢或没有改善</td><td>在每次回顾中，选择的改进项目不要超过三个。让仆人式领导帮助团队学习怎样整合这些待改进项</td></tr><tr><td>前期工作过多导致返工</td><td>不要做过多的前期工作，而要考虑让团队通过刺探来学习。另外，在项目开始时衡量在制品（WIP），看看哪些部分团队并不需要设计，只需要交付价值。缩短迭代，并创建一个稳健完整的定义</td></tr><tr><td>错误的开始，前功尽弃</td><td>让产品负责人成为团队不可分割的一分子</td></tr><tr><td>产品待办事项列表杂乱无序</td><td>按价值排序，并考虑延迟成本按持续时间（CD3）和其他价值模型划分</td></tr><tr><td>仓促/等待，不均匀的工作流程</td><td>计划要对应团队的能力，而不是超出能力所及。要求人员停止多任务，为一个团队专注工作。请团队利用结对、群集或群体开发等方法，平衡整个团队的能力</td></tr><tr><td>相关方要求无法满足</td><td>仆人式领导与这个相关方（可能是产品负责人）一起工作</td></tr><tr><td>意想不到或不可预见的延误</td><td>让团队更频繁地检查，使用看板面板检查工作流和在制品限制，了解需求对团队或产品的影响。也可以在障碍板上跟踪障碍和障碍消除情况</td></tr><tr><td>孤立的团队，而不是跨职能团队</td><td>让项目人员作为跨职能团队自我组织。使用仆人式领导技巧帮助管理人员理解为什么敏捷需要跨职能团队</td></tr></tbody></table><h2 id="敏捷项目的衡量指标" tabindex="-1"><a class="header-anchor" href="#敏捷项目的衡量指标" aria-hidden="true">#</a> 敏捷项目的衡量指标</h2><p>预测型衡量指标的问题在于它们往往并不反映真实的情况。往往直到发布日期前一个月，项目状态绿灯一直是亮的，这种项目有时被称为西瓜项目（外面绿，里面红）。</p><p>替代衡量指标（如完成百分比）不如经验目标（如已完成功能）更有用。</p><p>除了定量指标之外，团队还可以考虑收集定性衡量指标。其中一些定性衡量指标侧重于团队选择的实践，评估团队使用这些实践的情况，例如，对交付功能的业务满意度、团队的士气；团队希望跟踪的任何东西等都是定性衡量指标。</p><h3 id="敏捷团队的衡量结果" tabindex="-1"><a class="header-anchor" href="#敏捷团队的衡量结果" aria-hidden="true">#</a> 敏捷团队的衡量结果</h3><p>敏捷倾向于使用基于经验和价值的衡量指标</p><p>与其他知识型工作一样，软件产品开发关于在交付价值的同时进行学习。</p><p><strong>飓风图</strong></p><p><strong>燃尽图（燃起图）</strong>：显示团队成员的多任务处理、过于庞大的故事或团队成员缺勤的效果。</p><p>衡量指标：交付周期（交付一个工作项目花费的总时间，从项目添加到看板直至项目完成）、周期时间（处理一个工作项目所需的时间）和响应时间（一个工作项目等待工作开始的时间）。</p><p>达到 WIP 限制后，团队就不能将工作从左边提取到下一列。此时，团队就要从最右边的列中提取工作，并提出问题：“作为一个团队，我们应该怎样做才能将这项工作移到下一列中？”</p><p>故事点衡量与已完成的故事或功能的衡量有所不同。有些团队试图在没有完成实际功能或故事的情况下衡量故事点。团队仅衡量故事点时，衡量的是能力，而不是已完成的工作，这违背了“可用的软件是衡量进度的主要指标”的原则。</p><p><strong><em>传统的挣值管理（EVM）衡量指标，如进度绩效指标（SPI）和成本绩效指数（CPI）很容易转换成敏捷术语。</em></strong></p><p><strong>累计流图</strong></p>',66),l=[e];function h(p,n){return d(),r("div",null,l)}const c=t(i,[["render",h],["__file","chapter5.html.vue"]]);export{c as default};
