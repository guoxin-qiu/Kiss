import{_ as e,o as t,c as n,e as a}from"./app-d85a60fe.js";const r={},o=a('<h1 id="bdd" tabindex="-1"><a class="header-anchor" href="#bdd" aria-hidden="true">#</a> BDD</h1><h2 id="what-is-behavior-driven-development-bdd" tabindex="-1"><a class="header-anchor" href="#what-is-behavior-driven-development-bdd" aria-hidden="true">#</a> What Is Behavior-Driven Development (BDD)</h2><p>Behavioral-Driven Development (BDD) is derived from the Test-Driven Development (TDD) methodology. In BDD, tests are based on systems behavior. The BDD approach describes different ways to develop a feature based on its behavior. In most cases, the Given-When-Then approach is used for writing test cases.</p><p>Here is the overall approach to BDD:</p><p>Debugging the errors in the latter stages of the development life cycle often proves to be very expensive. In most cases, ambiguity in understanding the requirements is the root cause behind this. Therefore, one must ensure that all the development efforts remain aligned toward fulfilling pre-determined requirements. BDD allows developers to do the above by:</p><ol><li>Allowing the requirements to be defined in a standard approach using simple English.</li><li>Providing several ways to illustrate real-world scenarios for understanding requirements.</li><li>Providing a platform that enables the tech and non-tech teams to collaborate and understand the requirements.</li></ol><h2 id="pros-and-cons-of-behavior-driven-development-bdd" tabindex="-1"><a class="header-anchor" href="#pros-and-cons-of-behavior-driven-development-bdd" aria-hidden="true">#</a> Pros and Cons of Behavior-Driven Development (BDD)</h2><p>BDD is an approach that involves managers, testers, developers, etc., in the whole process. As a result, BDD offers a huge number of benefits. Let’s look at some of the major ones in this section.</p><h3 id="advantages-of-behavior-driven-development-bdd" tabindex="-1"><a class="header-anchor" href="#advantages-of-behavior-driven-development-bdd" aria-hidden="true">#</a> Advantages of Behavior-Driven Development (BDD)</h3><ol><li><strong>Improved Communication:</strong> Creating scenarios requires close coordination between clients, managers, developers, testers, etc. This unifies the team in understanding the product behavior.</li><li><strong>Reduced cost of Quality Control:</strong> Automated acceptance tests are used to depict the scenarios, which in turn helps in reducing the costs involved in inspecting the product quality.</li><li><strong>Accurate task estimation:</strong> Since the expected behavior is predicted before, there are few chances to change the software application’s architecture.</li><li><strong>Better user experience:</strong> The scenarios and tests written before development take the user’s perspective into account. The focus is on the desired behavior rather than on implementing features.</li><li><strong>Excellent documentation:</strong> When a certain test fails, the specification is updated, resulting in detailed documentation.</li></ol><h3 id="challenges-of-behavior-driven-development-bdd" tabindex="-1"><a class="header-anchor" href="#challenges-of-behavior-driven-development-bdd" aria-hidden="true">#</a> Challenges of Behavior-Driven Development (BDD)</h3><ol><li><strong>Requires more involvement from all the stakeholders:</strong> Putting all the people together becomes difficult for teams. Is it the three amigos sitting down together, talking, collaborating, and leaving with a common language around the system requirements?</li><li><strong>BDD tools struggle with parallelization:</strong> Cucumber and SpecFlow do parallelization or support parallel testing in a sub-optimal manner. They parallelize at the feature file level. It implies that if you want to run 50 tests in parallel, you need to have 50 feature files. That’s a lot of feature files.</li><li><strong>Writing incorrect Gherkin syntax:</strong> The issue is that most of us do not follow the correct Gherkin syntax as prescribed by the BDD creators. Just remember Given-When-Then steps must appear in order and cannot repeat.</li></ol>',12),i=[o];function s(l,d){return t(),n("div",null,i)}const c=e(r,[["render",s],["__file","02.intro-en.html.vue"]]);export{c as default};
