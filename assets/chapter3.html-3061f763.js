import{_ as t,o as d,c as l,e as r}from"./app-d85a60fe.js";const e={},i=r('<h1 id="生命周期选择" tabindex="-1"><a class="header-anchor" href="#生命周期选择" aria-hidden="true">#</a> 生命周期选择</h1><ul><li>预测型生命周期 <ul><li>传统，提前进行大量的计划工作，然后一次性执行</li><li>执行是一个连续的过程</li><li>充分利用已知和已经证明的事物。不确定性和复杂性的减少，允许项目团队将工作分解为一系列可预测的小组</li><li>分析 - 设计 - 构建 - 测试 - 交付</li></ul></li><li>迭代型生命周期 <ul><li>通过言行或概念验证来改进产品或成果</li><li>允许对未完成的工作进行反馈，从而改进和修改该工作</li></ul></li><li>增量型生命周期 <ul><li>向客户提供各个已完成的，可能立即使用的可交付成果</li></ul></li><li>敏捷生命周期 <ul><li>既有迭代，也有增量，便于完善工作，频繁交付</li></ul></li><li>混合生命周期</li></ul><table><thead><tr><th>方法</th><th>需求</th><th>活动</th><th>交付</th><th>目标</th></tr></thead><tbody><tr><td>预测型</td><td>固定</td><td>整个项目仅执行一次</td><td>一次交付</td><td>管理成本</td></tr><tr><td>迭代型</td><td>动态</td><td>反复执行直至修正</td><td>一次交付</td><td>解决方案的正确性</td></tr><tr><td>增量型</td><td>动态</td><td>对给定增量执行一次</td><td>频繁更小规模交付</td><td>速度</td></tr><tr><td>敏捷型</td><td>动态</td><td>反复执行直至修正</td><td>频繁小规模交付</td><td>通过频繁小规模的交付和反馈实现客户价值</td></tr></tbody></table><h2 id="混合敏捷方法" tabindex="-1"><a class="header-anchor" href="#混合敏捷方法" aria-hidden="true">#</a> 混合敏捷方法</h2><ul><li>裁剪敏捷框架</li></ul><table><thead><tr><th>项目因素</th><th>裁剪方案</th></tr></thead><tbody><tr><td>需求模式：稳定型或偶发型</td><td>许多团队发现，使用节奏（以定期时间盒的形式）能帮助他们演示、回顾和理解信任务。此外，有些团队在接收更多任务时需要更多的灵活性。团队可使用基于流的敏捷方法，利用节奏实现两全其美</td></tr><tr><td>团队经验水平所要求的过程改进速度</td><td>更频繁地回顾并选择改进措施</td></tr><tr><td>工作流往往被各种延误或障碍打断</td><td>考虑利用看板面板让工作可见，对工作过程的不同领域尝试限制，从而改进工作流。</td></tr><tr><td>产品增量的质量不佳</td><td>考虑利用各种测试驱动开发的实践。这种防错机制使缺陷难以不被发现</td></tr><tr><td>创建某个产品需要不止一个团队</td><td>从一个敏捷团队扩展到数个敏捷团队，同时只有轻微干扰，首先要了解敏捷项目集管理或者正规扩展框架。其次，要精心指定一种适合项目背景的方法</td></tr><tr><td>项目团队成员缺乏使用敏捷方法的经验</td><td>考虑从培训团队成员敏捷思维模式和敏捷原则的基本源利开始。如果团队决定使用特定的方法，如果 Scrum 或看板，则要针对上述方法举办研讨会，让团队成员学习如何使用。</td></tr></tbody></table>',6),a=[i];function h(c,o){return d(),l("div",null,a)}const n=t(e,[["render",h],["__file","chapter3.html.vue"]]);export{n as default};
